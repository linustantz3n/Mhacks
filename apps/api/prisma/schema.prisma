generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  name                String?
  createdAt           DateTime               @default(now())
  Profile             Profile?
  emailProviderAccounts EmailProviderAccount[]
  emailThreads        EmailThread[]
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  summary     String?
  schools     String?  // JSON stored as string for SQLite
  companies   String?  // JSON stored as string for SQLite
  skills      String?  // JSON stored as string for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CandidateContact {
  id          String   @id @default(cuid())
  name        String
  title       String?
  company     String?
  email       String?
  linkedinUrl String?
  location    String?
  summary     String?
  source      String   @default("mock")
  createdAt   DateTime @default(now())
}

model Campaign {
  id        String   @id @default(cuid())
  userId    String
  name      String
  goal      String?
  status    String   @default("draft")
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(cuid())
  campaignId String?
  candidateId String
  channel    String
  direction  String   @default("outbound")
  subject    String?
  body       String
  state      String   @default("draft")
  providerMessageId String?
  createdAt  DateTime @default(now())
}

model Event {
  id        String   @id @default(cuid())
  provider  String
  type      String
  messageId String?
  payload   String?  // JSON stored as string for SQLite
  createdAt DateTime @default(now())
}

// AgentMail Email Automation Models
model EmailProviderAccount {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  provider          String        @default("agentmail") // 'agentmail', 'sendgrid', etc.
  externalInboxId   String        // AgentMail inbox ID
  address           String        // email@inbox.agentmail.to
  displayName       String?
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  emailThreads      EmailThread[]

  @@unique([userId, provider])
  @@map("email_provider_accounts")
}

model EmailThread {
  id                  String                @id @default(cuid())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  leadId              String?               // Reference to candidate/lead
  providerAccountId   String
  providerAccount     EmailProviderAccount  @relation(fields: [providerAccountId], references: [id])
  providerThreadId    String                // AgentMail thread ID
  subject             String
  recipientEmail      String
  recipientName       String?
  lastMessageAt       DateTime?
  state               String                @default("OUTBOUND_SENT")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt

  // Relations
  messages            EmailMessage[]

  @@unique([providerAccountId, providerThreadId])
  @@map("email_threads")
}

model EmailMessage {
  id                  String          @id @default(cuid())
  threadId            String
  thread              EmailThread     @relation(fields: [threadId], references: [id])
  direction           String
  providerMessageId   String          // AgentMail message ID
  fromEmail           String
  toEmail             String
  subject             String?
  snippet             String?         // Brief preview/summary
  bodyHtml            String?
  bodyText            String?
  rawJson             String?         // JSON stored as string for SQLite
  occurredAt          DateTime        @default(now())
  createdAt           DateTime        @default(now())

  @@unique([threadId, providerMessageId])
  @@map("email_messages")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  provider    String   // 'agentmail', etc.
  type        String   // 'message.delivered', 'message.received', etc.
  eventId     String?  // Provider's event ID if available
  rawJson     String   // JSON stored as string for SQLite
  processed   Boolean  @default(false)
  receivedAt  DateTime @default(now())
  processedAt DateTime?

  @@unique([provider, eventId])
  @@map("webhook_events")
}

// Note: SQLite doesn't support enums, so we use strings instead
// EmailThreadState: "OUTBOUND_SENT" | "AWAITING_REPLY" | "SCHEDULING" | "CONFIRMED" | "CLOSED" | "PAUSED" | "ERROR"
// MessageDirection: "OUTBOUND" | "INBOUND"
